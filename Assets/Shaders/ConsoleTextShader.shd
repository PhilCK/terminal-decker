
Text Shader
-----------


[VERTEXSHADER]

#version 150 core

// Vertex Format
in vec2 inPosition;
in float inID;

// Output
out VertexData
{
	int inID;
} vertexOut;

void main()
{
	vertexOut.inID = int(inID);
}

[/VERTEXSHADER]


[GEOMETRYSHADER]

#version 150

layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

// Input
in VertexData {
	int inID;
} vertexIn[];

out vec2 texC;

uniform sampler1D 	dataLookup;
uniform vec2 		bufferResolution;
uniform vec2 		textureResolution;

void main()
{
	// Generate billboard.
	for(int i = 0; i < 4; i++)
	{
		// Row and Col of the billboard
		float row = floor(i / 2.0);
		float col = mod(i, 2.0);

		// Get data for this character
		vec4 dataChunk1 = texelFetch(dataLookup, vertexIn[0].inID, 0);
		vec4 dataChunk2 = texelFetch(dataLookup, vertexIn[0].inID + 1, 0);

		vec2 uvCoords 		= vec2(dataChunk1.z, dataChunk1.y);
		vec2 charSize 		= vec2(dataChunk1.x, dataChunk1.w);
		vec2 offset   		= vec2(dataChunk2.z, -dataChunk2.y);
		vec2 charAdvance 	= vec2(dataChunk2.x, -dataChunk2.w);

		float scale = 0.75;

		// Vertex Position
		// We draw the polygon from top left - to bottom right.
		// This is how the data comes to us from fnt files.
		// 0,0--0,1
		// |    |
		// |    |
		// 0,1--1,1

		vec2 pixelPositionUnscaled	= vec2(col, -row);
		vec2 pixelPositionScaled 	= vec2(pixelPositionUnscaled.x * charSize.x, pixelPositionUnscaled.y * charSize.y);
		vec2 pixelPositionOffset	= pixelPositionScaled + offset;

		vec2 screenPosition 		= vec2(pixelPositionOffset.x / bufferResolution.x, pixelPositionOffset.y / bufferResolution.y);
		vec2 screenScaledPosition 	= vec2(screenPosition * scale);

		vec2 screenAdvance 			= vec2(charAdvance.x / bufferResolution.x, charAdvance.y / bufferResolution.y);
		vec2 screenOffseted 		= vec2((screenAdvance.x * scale) + screenScaledPosition.x, (screenAdvance.y * scale) + screenScaledPosition.y);

		vec2 origin					= vec2(-1, +1);
		vec2 finalPosition			= origin + screenOffseted;

		gl_Position = vec4(finalPosition, 0.0, 1.0);

		// UV Coords
		float u = uvCoords.x + (col * (charSize.x / textureResolution.x));
		float v = uvCoords.y + (row * (charSize.y / textureResolution.y));

		texC = vec2(u, v);

		EmitVertex();
	}

	EndPrimitive();
}

[/GEOMETRYSHADER]


[PIXELSHADER]

#version 150

in vec2 texC;

// Uniforms
uniform sampler2D fontLookup;

// Output
out vec4 outColor;

void main()
{
	outColor = texture(fontLookup, texC);
}

[/PIXELSHADER]
